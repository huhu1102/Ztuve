<!-- 工序顺序 -->
<template>
  <div>
    <div style="padding: 0px;display:flex;justify-content:space-between;align-items: center">

      <div style="display: inline">
        <el-input placeholder="通过工序名搜索,记得回车哦..." clearable @change="keywordsChange"
          style="width: 300px;margin: 0px;padding: 0px;" size="mini" :disabled="advanceSearchViewVisible"
          @keyup.enter.native="searchEmp" prefix-icon="el-icon-search" v-model="keywords">
        </el-input>
        <el-button type="primary" size="mini" style="margin-left: 5px" icon="el-icon-search" @click="searchEmp">搜索

        </el-button>
      </div>
      <div style="margin-left: 5px;margin-right: 20px;display: inline">
        <el-button type="primary" @click="addAndFlushEmp" size="mini" icon="el-icon-plus">添加</el-button>
      </div>
    </div>

    <el-dialog v-dialogDrag :title="dialogTitle" style="padding: 0px;" :close-on-click-modal="false"
      :visible.sync="dialogFormVisible" @close="cancelOpt" width="600px">
      <div style="width: 100% " v-if="dialogFormVisible">
        <el-form :model="process" :rules="rules" ref="addEmpForm" size="small" label-width="90px">
          <el-form-item label="名称:" prop="name">
            <el-input prefix-icon="el-icon-edit" v-model="process.name" size="mini" style="width: 200px"
              placeholder="工序名称"></el-input>
          </el-form-item>
          <el-transfer style="text-align: left; " filterable v-model="selectSteps" target-order="push"
            :props="{key:'id',label:'workstepName'}" :titles="['工序步骤', '工序']" :data="steps">
          </el-transfer>
        </el-form>
      </div>
      <div slot="footer" class="dialog-footer">
        <el-button @click="dialogFormVisible=false">取 消</el-button>
        <el-button type="primary" @click="add('addEmpForm')">确 定</el-button>
      </div>
    </el-dialog>
    <el-table :data="processs" fit border style="width: 100%">
      <el-table-column type="selection" align="left" v-loading="tableLoading" width="30">
      </el-table-column>
      <el-table-column align="left" label="操作" width="160">
        <template slot-scope="scope">
          <el-button @click="showEditEmpView(scope.row)" style="padding: 3px 4px 3px 4px;margin: 2px" size="mini">编辑
          </el-button>
          <el-button type="danger" style="padding: 3px 4px 3px 4px;margin: 2px" size="mini"
            @click="deleteData(scope.row)">删除
          </el-button>
        </template>
      </el-table-column>
      <el-table-column align="left" prop='name' label="工序名" width="120">
      </el-table-column>
      <el-table-column align="left" label="流程">
        <template slot-scope="scope">
          <el-steps space="20%" align-center>
            <el-step :title="step.name" v-for="(step,index)  in   scope.row.process" :key="index" class="detail">
            </el-step>
          </el-steps>
        </template>
      </el-table-column>

    </el-table>
    <div style="display: flex;justify-content: flex-end;margin: 2px">
      <el-pagination background :page-size="10" :pager-count="11" :current-page="currentPage"
        @current-change="currentChange" layout="prev, pager, next" :total="totalCount">
      </el-pagination>
    </div>
  </div>

</template>
<script>
  export default {
    data() {
      return {
        showOrHidePop: false,
        defaultProps: {
          label: 'plateNumber',
          isLeaf: 'leaf',
          children: 'children'
        },
        depTextColor: '#c0c4cc',
        keywords: '',
        tableLoading: false,
        advanceSearchViewVisible: false,
        rules: {
          name: [{
            required: true,
            message: '必填:名称',
            trigger: 'blur'
          }],
        },
        processs: [],
        dialogTitle: '',
        currentPage: 1,
        totalCount: -1,
        cars: [],
        process: {
          preProcessId: 0,
          name: '',
          currentSteps: '',
          code: '',
        },
        dialogTableVisible: false,
        dialogFormVisible: false,
        steps: [],
        selectSteps: [],
        addprogress: [],
        delprogress: [],
        updprogress: [],
        oodprogress: [],
        oodcode: '',
        nowcode: '',
      }
    },
    mounted: function () {
      this.initData();
    },

    methods: {
      searchEmp() {
        this.loadData();
      },
      cancelOpt() {
        this.dialogFormVisible = false;
        this.loadData();
      },
      showDepTree() {
        this.showOrHidePop = !this.showOrHidePop;
      },
      handleNodeClick(data) {
        this.process.carNo = data.plateNumber;
        this.showOrHidePop = false;
        this.depTextColor = '#606266';
      },
      initData() {
        var _this = this;
        _this.loadData();
        this.getRequest("/product/basicdata").then(resp => {
          if (resp && resp.status == 200) {
            var data = resp.data;
            _this.steps = data.root.steps;
            console.log(_this.steps)
          }
        })
      },
      keywordsChange(val) {
        if (val == '') {
          this.loadData();
        }
      },
      currentChange(currentChange) {
        this.currentPage = currentChange;
        console.log(this.currentPage);
        this.loadData();
      },
      addAndFlushEmp() {
        this.dialogTitle = "添加";
        this.emptyData();
        this.dialogFormVisible = true;
      },
      searchData() {
        this.loadData();
      },
      showProcessView(row) {
        console.log(row)
        this.dialogTitle = "查看工序";


      },
      showEditEmpView(row) {
        console.log(row);
        let that = this;
        this.dialogTitle = "编辑信息";
        this.process.name = row.name;
        this.process.preProcessId = row.id;
        if (row.process && row.process.length) {
          var n = row.process.length;
          for (let i = 0; i < n; i++) {
            const element = row.process[i];
            that.selectSteps.push(element.workstep.id);
            that.oodcode = that.oodcode + element.workstep.id
          }
        }


        this.dialogFormVisible = true;
      },
      add(addEmpForm) {
        this.dialogFormVisible = true;
        var _this = this;

        this.$refs[addEmpForm].validate((valid) => {
          if (valid) {
            if (this.process.preProcessId) {
              //更新

              _this.nowcode = _this.selectSteps.join('');
              if (_this.nowcode != _this.oodcode) {
                // 比较原工序步骤与现 工序步骤
                var nowarr = _this.nowcode.split('');
                var oodarr = _this.oodcode.split('');
                for (let i = 0, n = oodarr.length; i < n; i++) {
                  const oldData = oodarr[i];
                  for (let j = 0, m = nowarr.length; j < m; j++) {
                    const newData = nowarr[j];
                    if (i == j) {
                      if (oldData != newData) {
                        _this.updprogress.push({
                          stepNumber: j + 1,
                          step: parseInt(newData),
                          stepType: 'update'
                        })
                      }
                    }
                  }
                }
                if (nowarr.length > oodarr.length) {
                  for (let k = oodarr.length - 1, n = nowarr.length - 1; k < n; k++) {
                    _this.addprogress.push({
                      stepNumber: k + 1,
                      step: parseInt(nowarr[k]),
                      stepType: 'add'
                    })

                  }

                } else if (nowarr.length < oodarr.length) {
                  for (let k = nowarr.length - 1, n = oodarr.length - 1; k < n; k++) {
                    _this.delprogress.push({
                      stepNumber: k + 1,
                      step: parseInt(nowarr[k]),
                      stepType: 'delete'
                    })
                  }
                }

                var detail = _this.updprogress.concat(_this.addprogress, _this.delprogress);
                console.log(detail);
                var upstr = this.jsonToString(detail);
                this.process.currentSteps = upstr;
                this.process.code = _this.nowcode;

                this.tableLoading = true;
                console.log(this.process);
                this.postRequest("/productpreprocess/update", this.process).then(resp => {
                  _this.tableLoading = false;
                  if (resp && resp.status == 200) {
                    _this.dialogFormVisible = false;
                    _this.loadData();
                    _this.emptyData();

                  }
                })
              }

            } else {
              _this.process.currentSteps = this.selectSteps.join(",");
              _this.process.code = this.selectSteps.join("");
              _this.selectSteps.forEach(function (v, i, arr) {
                _this.addprogress.push({
                  stepNumber: i,
                  step: v,
                  stepType: 'add'
                })
              });
              //将json 转为字符串
              var str = this.jsonToString(_this.addprogress);
              _this.process.currentSteps = str;
              //添加
              _this.tableLoading = true;
              console.log(_this.process);
              this.postRequest("/productpreprocess/add", this.process).then(resp => {
                _this.tableLoading = false;
                if (resp && resp.status == 200) {
                  var data = resp.data;
                  _this.dialogFormVisible = false;
                  _this.loadData();
                  _this.emptyData();

                }
              })
            }
          } else {
            return false;
          }
        });
      },
      deleteData(row) {
        this.$confirm('此操作将删除该行记录, 是否继续?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          this.doDelete(row.id);
        }).catch(() => {});
      },
      doDelete(ids) {
        this.tableLoading = true;
        var _this = this;
        this.getRequest("/productpreprocess/delete?id=" + ids).then(resp => {
          _this.tableLoading = false;
          if (resp && resp.status == 200) {
            var data = resp.data;
            _this.loadData();
          }
        })
      },
      loadData() {
        var _this = this;
        this.tableLoading = true;
        this.getRequest("/productpreprocess/findbypage?page=" + this.currentPage + "&size=10&queryName=" + this
            .keywords)
          .then(resp => {
            this.tableLoading = false;
            if (resp && resp.status == 200) {
              var data = resp.data.data;
              _this.processs = data;
              _this.totalCount = resp.data.total;
              _this.emptyData();
            }
          })
      },
      handleCommand(cmd) {
        var _this = this;
        if (cmd == 'logout') {
          this.$confirm('注销登录, 是否继续?', '提示', {
            confirmButtonText: '确定',
            cancelButtonText: '取消',
            type: 'warning'
          }).then(() => {
            // _this.getRequest("/logout");
            // _this.$store.commit('logout');
            _this.$router.replace({
              path: '/'
            });
          }).catch(() => {
            _this.$message({
              type: 'info',
              message: '取消'
            });
          });
        }
      },
      emptyData() {
        this.process = {
          name: '',
          code: '',
          currentSteps: '',
          preProcessId: 0,
        }
        this.addprogress = [];
        this.delprogress = [];
        this.updprogress = [];
        this.oodprogress = [];
        this.selectSteps = [];
        this.oodcode = '';
        this.nowcode = '';

      }
    },

    computed: {
      routes() {
        return this.$store.state.routes
      }
    },
    watch: {}
  }

</script>
<style>
  .el-submenu .el-menu-item {
    width: 180px;
    min-width: 175px;
  }

</style>
