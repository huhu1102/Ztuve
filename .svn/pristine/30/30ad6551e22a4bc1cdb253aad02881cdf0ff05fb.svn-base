<template>
  <div>
    <el-container>
      <!--销售计划 -->
      <el-header class="send-head">
        <div style="display: inline">
          <!-- <div class="block"> -->
          <!-- <span class="demonstration">带快捷选项</span> -->
          <el-date-picker  v-model="value5" type="datetimerange" :picker-options="pickerOptions2" range-separator="至"
                          start-placeholder="开始日期" end-placeholder="结束日期" align="right">
          </el-date-picker>
          <el-button type="primary" size="mini" class="send-head-left-btn" icon="el-icon-search" @click="searchData">搜索
          </el-button>
          <el-button slot="reference" type="primary" size="mini" class="send-head-right-btn"
                     @click="showAdvanceSearchView"><i
            class="fa fa-lg send-head-left-btn"
            v-bind:class="[advanceSearchViewVisible ? faangledoubleup:faangledoubledown]"
          ></i>高级搜索
          </el-button>
        </div>
        <div class="send-head-right-btn">
          <el-button type="primary" size="mini" icon="el-icon-plus" @click="addAndFlushData">
            添加
          </el-button>
          <el-button type="success" v-if="showDetaillist" icon="el-icon-back" @click="back" circle>返回</el-button>
        </div>
      </el-header>
      <el-main class="send-main">
        <transition name="slide-fade">
          <div class="send-main-div"
               v-show="advanceSearchViewVisible">
            <el-row>
              <el-col :span='8'>
                产品:
                <el-input prefix-icon="el-icon-edit" v-model="keyproductName" size="mini" class="send-input"
                          placeholder="产品名称。。。">
                </el-input>
              </el-col>
              <el-col :span='8'>
                客户:
                <el-input prefix-icon="el-icon-edit" v-model="keyClientName" size="mini" class="send-input"
                          placeholder="客户名。。。">
                </el-input>
              </el-col>
              <el-col :span='8'>
                操作人:
                <el-input prefix-icon="el-icon-edit" v-model="keyempName" size="mini" style="width: 200px"
                          placeholder="员工名。。。">
                </el-input>
              </el-col>
            </el-row>
            <el-row style="margin-top: 10px;display: flex;justify-content: flex-end;">
              <el-col :span="5" :offset="4">
                <el-button size="mini" @click="cancelSearch">取消</el-button>
                <el-button icon="el-icon-search" type="primary" size="mini" @click="searchData">搜索</el-button>
              </el-col>
            </el-row>
          </div>
        </transition>
        <div v-show="!showDetaillist">
          <el-tabs v-model="activePanel" type="card" tab-position="top" @tab-click="handleClick">
            <el-tab-pane label="新订单" name='1'></el-tab-pane>
            <el-tab-pane label="进行中" name='2'></el-tab-pane>
            <el-tab-pane label="撤销" name='4'></el-tab-pane>
            <el-tab-pane label="汇总" name='7'></el-tab-pane>
          </el-tabs>
          <div class="main-salse-progress-plan flex-sales">
            <div class="item-sales"
                 v-for="(plandetail,index) in plans"
                 @mouseover="plandetail.onhover=true"
                 @mouseout="plandetail.onhover=false"
                 v-bind:key="plandetail.id ">
              <div class="in-sales-show" :style="{backgroundColor:plandetail.bgcolor}">
                <!--               文字描述：-->
                <div>
                  <div class="text-alight">客户:{{plandetail.client.name}}</div>
                  <div class="text-alight">
                    产品:{{plandetail.product.producteName}}
                    /{{plandetail.specification.name}}
                    /{{plandetail.color.name}}
                  </div>
                  <div class="text-alight">
                    型号：{{plandetail.productNo}}
                  </div>
                  <div>
                    <u>总数
                      :{{plandetail.quantity}}|</u>
                    <u> 下发:{{plandetail.nextQuantity}}|</u>
                    <u> 完成:{{plandetail.endQuantity}}/枚| </u>
                    <u>未下发：{{plandetail.quantity-plandetail.nextQuantity}}</u>
                  </div>
                  <div>{{plandetail.planString}}</div>
                  <div class="text-alight">
                    备注：{{plandetail.notes}}
                  </div>
                </div>
                <!--                操作按钮-->
                <div style="padding: 12px 0;">
                  <el-button
                    type="primary"
                    @click="showEditEmpView(index,plandetail)"
                    style="padding: 2px;margin: 2px"
                    size="mini">编辑订单
                  </el-button>
                  <el-button
                    type="danger"
                    @click="cancelPlan(plandetail)"
                    style="padding: 2px;margin: 2px"
                    size="mini">撤销订单
                  </el-button>
                  <el-button
                    type="primary"
                    @click="showplanDetail(plandetail)"
                    style="padding:2px;margin: 2px"
                    size="mini">查看计划
                  </el-button>


                </div>
              </div>
            </div>

          </div>
          <div v-if="plans.length===0" v-else>
            暂无数据
          </div>


          <div class="page-tool" >
            <el-pagination background :page-size="10" :pager-count="11" :current-page="currentPage"
                           @current-change="currentChange" layout="prev, pager, next" :total="totalCount">
            </el-pagination>
          </div>
        </div>
        <div v-show="showDetaillist">
          <el-table :data="plandetaillist" highlight-current-row fit border style="width: 100%">
            <el-table-column align="left" label="客户名">
              <template slot-scope="scope">
                {{scope.row.salesPlan.client.name}}
              </template>
            </el-table-column>
            <el-table-column align="left" label="产品名称">
              <template slot-scope="scope">
                {{scope.row.salesPlan.product.producteName}}
              </template>
            </el-table-column>
            <el-table-column align="left" label="计划量/完成量">
              <template slot-scope="scope">{{ scope.row.actualQuantity}}/{{scope.row.accomplishNO}}枚
              </template>
            </el-table-column>
            <el-table-column prop="status" :formatter="statusFormat" align="left" label="状态">
            </el-table-column>
            <el-table-column prop="note" align="left" label="备注">
            </el-table-column>
          </el-table>
          <div style="display: flex;justify-content: flex-end;margin: 2px">
            <el-pagination background :page-size="10" :pager-count="11" :current-page="currentDetailPage"
                           @current-change="currentDetailChange" layout="prev, pager, next" :total="totalDatailPage">
            </el-pagination>
          </div>
        </div>
      </el-main>
    </el-container>
    <el-dialog v-dialogDrag :title="dialogTitle" style="padding: 0px;" :close-on-click-modal="false"
               :visible.sync="dialogFormVisible" @close="cancelOpt" v-if="dialogFormVisible" width="750px">
      <div style="width: 100% " v-if="dialogFormVisible">
        <el-form :model="detail" ref="addEmpForm" size="mini" label-width="90px">
          <div style="border: 1px solid #eeeeee;">
            <!-- 客户信息 -->
            <div style="background-color:bisque">
              <div style="text-align: left;">
                客户信息
              </div>
              <el-row>
                <el-col :span='11'>
                  <el-form-item label="客户:" prop="clientId">
                    <el-cascader
                      placeholder="--选择客户--"
                      :options="clients"
                      :props="defaultProps"
                      filterable
                      :show-all-levels="false"
                      v-model="detail.clientId"
                      change-on-select
                      @change="currentSelectShop"
                      clearable
                    ></el-cascader>
                  </el-form-item>
                </el-col>
                <el-col :span="12">
                  <el-form-item label="订单等级:" prop="expectLevel">
                    <el-select v-model="detail.expectLevel" filterable placeholder="请选择" style="width: 200px;">
                      <el-option
                        v-for="item in options"
                        :key="item.value"
                        :label="item.label"
                        :value="item.value">
                      </el-option>
                    </el-select>
                  </el-form-item>
                </el-col>
              </el-row>
            </div>
            <!-- 产品信息 -->
            <div style="background-color: rgb(175, 218, 136)">
              <div style="text-align: left;">
                产品信息
              </div>
              <el-row>
                <el-col :span='11'>
                  <el-form-item label="名称:" prop="productName">
                    <el-input prefix-icon="el-icon-edit" v-model="detail.productName" size="mini" style="width: 200px"
                              @focus='showMaterial' placeholder="产品名称。。。"></el-input>
                  </el-form-item>
                </el-col>
                <el-col :span='11'>
                  <el-form-item label="型号:" prop="productNo">
                    <el-input prefix-icon="el-icon-edit" v-model="detail.productNo" size="mini" style="width: 200px"
                              placeholder="型号"></el-input>
                  </el-form-item>
                </el-col>

              </el-row>
              <el-row>
                <el-col :span='11'>
                  <el-form-item label="标记:" prop="mark">
                    <el-input prefix-icon="el-icon-edit" v-model="detail.mark" size="mini" style="width: 200px"
                              placeholder="标记"></el-input>
                  </el-form-item>
                </el-col>
                <el-col :span='11'>
                  <el-form-item label="规格:" prop="specsId">
                    <el-select v-model="detail.specsId" style="width: 200px" size="mini" placeholder="请选择规格">
                      <el-option
                        v-for="item in specslist"
                        :key="item.id"
                        :label="item.name"
                        :value="item.id">
                      </el-option>
                    </el-select>
                  </el-form-item>
                </el-col>


              </el-row>
              <el-row>
                <el-col :span='11'>
                  <el-form-item label="颜色:" prop="colorId">
                    <el-select v-model="detail.colorId" style="width: 200px" size="mini" placeholder="--请选择色彩--">
                      <el-option
                        v-for="item in colorlist"
                        :key="item.id"
                        :label="item.name"
                        :value="item.id">
                      </el-option>
                    </el-select>
                  </el-form-item>
                </el-col>
                <el-col :span='11'>
                  <el-form-item label="数量:" prop="quantity">
                    <el-input type='number' placeholder="原料数量(枚)" size="mini" prefix-icon="el-icon-edit"
                              min="0" step="1000" v-model="detail.quantity" style="width: 200px;background: #fff;">
                    </el-input>
                  </el-form-item>
                </el-col>

              </el-row>
              <el-row>
                <el-col :span='11'>
                  <el-form-item label="备注:" prop="notes">
                    <el-input prefix-icon="el-icon-edit" v-model="detail.notes" size="mini" style="width: 200px"
                              placeholder="备注。。。"></el-input>
                  </el-form-item>
                </el-col>
              </el-row>

              <div>
              </div>
            </div>
          </div>
        </el-form>
      </div>
      <div slot="footer" class="dialog-footer">
        <el-button @click="dialogFormVisible=false">取 消</el-button>
        <el-button type="primary" @click="add('addEmpForm')">确 定</el-button>
      </div>
    </el-dialog>
    <el-dialog v-dialogDrag :title="dialogMaterialTitle" style="padding: 0px;" :close-on-click-modal="false"
               :visible.sync="dialogMaterialVisible" @close="cancelchoose" width="480px">
      <div style="width: 100% " v-if="dialogMaterialVisible">
        <div style="padding: 0px;display:flex;justify-content:space-between;align-items: center">
          <!-- 产品的搜索   -->
          <div style="display: inline">
            <el-input placeholder="通过名称搜索,记得回车哦..." clearable @change="keywordsMaterialChange"
                      style="width: 300px;margin: 0px;padding: 0px;" size="mini"
                      @keyup.enter.native="searchMaterialData"
                      prefix-icon="el-icon-search" v-model="keyMaterialwords">
            </el-input>
            <el-button type="primary" size="mini" style="margin-left: 5px" icon="el-icon-search"
                       @click="searchMaterialData">搜索
            </el-button>
          </div>
        </div>
        <!-- 产品表 -->
        <el-table :data="materialList" border style="width: 100%" @row-click="showRow">
          <el-table-column align="center" fixed label="当前" width="80">
            <template slot-scope="scope">
              <el-radio :label="scope.$index" v-model='selectedM'>&nbsp;</el-radio>
            </template>
          </el-table-column>
          <el-table-column prop="producteName" align="left" fixed label="名称" width="120">
          </el-table-column>
          <el-table-column prop="specName" align="left" fixed label="规格" width="120">
          </el-table-column>
          <el-table-column prop="proType" align="left" fixed label="型号" width="120">
          </el-table-column>
          <el-table-column prop="colorName" align="left" fixed label="颜色" width="120">
          </el-table-column>

        </el-table>
        <div style="display: flex;justify-content: flex-end;margin: 2px">
          <el-pagination background :page-size="10" :pager-count="11" :current-page="currentMaterialPage"
                         @current-change="currentMaterialChange" layout="prev, pager, next" :total="totalMaterialCount">
          </el-pagination>
        </div>
      </div>
      <div slot="footer" class="dialog-footer">
        <el-button @click="dialogMaterialVisible=false">取 消</el-button>
        <el-button type="primary" @click="chooseMaterial()">确 定</el-button>
      </div>
    </el-dialog>
  </div>

</template>
<script>
  import {
    Message
  } from 'element-ui'

  export default {
    data() {
      return {

        options: [{
          value: 1,
          label: '紧急'
        }, {
          value: 2,
          label: '加急'
        }, {
          value: 3,
          label: '备货'
        }, {
          value: 4,
          label: '正常'
        }, {
          value: 5,
          label: '特殊'
        }],
        selectedStep: {},
        lastPlanDetail: {
          startNo: 'J00000001',
          endNo: "J00000100"
        },
        lastPlanmarketPlanDetails: [{
          startNo: 'J00000001',
          endNo: "J00000100"
        }, {
          startNo: 'K00000001',
          endNo: "K00000100"
        }],
        // 月份使用？
        pickerOptions2: {
          shortcuts: [{
            text: '最近一周',
            onClick(picker) {
              const end = new Date();
              const start = new Date();
              start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);
              picker.$emit('pick', [start, end]);
            }
          }, {
            text: '最近一个月',
            onClick(picker) {
              const end = new Date();
              const start = new Date();
              start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);
              picker.$emit('pick', [start, end]);
            }
          }, {
            text: '最近三个月',
            onClick(picker) {
              const end = new Date();
              const start = new Date();
              start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);
              picker.$emit('pick', [start, end]);
            }
          }]
        },
        value4: [new Date(2000, 10, 10, 10, 10), new Date(2000, 10, 11, 10, 10)],
        value5: '',
        //***********************************________*******************************
        keywords: '',
        tableLoading: false,
        advanceSearchViewVisible: false,
        types: 2,
        midProduct: [],
        plans: [],
        clients: [],
        units: [],
        dialogTitle: '',
        currentPage: 1,
        currentDetailPage: 1,
        totalDatailPage: -1,
        totalCount: -1,
        // 原材料
        totalMaterialCount: -1,
        keyMaterialwords: '',
        currentMaterialPage: 1,

        detail: {
          id: 0,
          clientId: [],
          clientName: '',
          quantity: '',
          note: '',
          expectLevel: '',//订单等级
          productName: '',
          proId: '', //产品Id
          specification: "", //规格
          mark: '', //标记
          productNo: '', //型号
          specsId: "",//规格Id
          colorId: '',
          progressId: 0,//工序Id;
        },

        dialogFormVisible: false,
        currentRowData: {}, //当前选中行数据
        currentIndex: '', //当前选中行号
        depTextColor: '',
        showOrHidePop: false,
        showHidePop: false,
        defaultProps: {
          value: 'id',
          label: 'name',
          children: 'child'
        },
        maxSid: 0,
        currentDeleteData: [],
        materials: [],
        materialList: [],
        products: [],
        dialogMaterialVisible: false,
        dialogMaterialTitle: '请选择产品',
        selectMaterial: {}, //当前选择的原料
        selectedM: {},
        filterText: '',
        crrentSelectShop: {}, //当前选中的公司；
        isCurrentShop: true,
        isprarent: false,
        sugestParentstartNo: '', //..公司
        sugestParentEndNo: '', //公司结束编号
        sugestSelfEndNumbers: '',
        sugestSelfNumbers: '', //仅子公司
        currentParentShop: {},
        currentShop: {},
        lastPlanDetail: {
          startNo: '',
          endNo: '',
        },
        serialNuberDeleted: [], //删除编号集合
        serialNuberUpdate: [], //更新编号集合
        serialNuberList: [], //编号集合
        specslist: [],
        colorlist: [],
        selectPreStep: {},
        selectSteps: [],
        activePanel: '1',
        manageStatus: '1',
        plandetaillist: [],
        showDetaillist: false,
        showPlan: true,
        detailPage: 1,
        currentPlanId: '',
        //搜索
        advanceSearchViewVisible: false,
        faangledoubleup: 'fa-angle-double-up',
        faangledoubledown: 'fa-angle-double-down',
        keyproductName: '',
        keyClientName: '',
        keyempName: '',
      }
    },
    mounted: function () {
      this.initData();
    },


    methods: {
      showAdvanceSearchView() {
        this.advanceSearchViewVisible = !this.advanceSearchViewVisible;
        this.keywords = '';
        if (!this.advanceSearchViewVisible) {
          this.emptyData();
          // this.beginDateScope = '';
          this.loadData();
        }
      },
      cancelSearch() {
        this.advanceSearchViewVisible = false;
        this.emptyData();
        // this.beginDateScope = '';
        this.loadData();
      },
      currentSelectShop(e) {
        console.log(e + '客户');
        this.detail.clientId = Array.from(e);
      },
      handleClick() {
        console.log(this.activePanel);
        switch (this.activePanel) {
          case "1":
            this.manageStatus = "1";
            break;
          case "2":
            this.manageStatus = "2";
            break;
          case "4":
            this.manageStatus = "3";
            break;
          case "7":
            this.manageStatus = "4";
            break;
          default:
            break;
        }
        this.loadData();
      },      //撤销销售计划
      cancelPlan(row) {
        this.$confirm('此操作将撤销该销售计划, 是否继续?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          this.doCancel(row.id);
        }).catch(() => {
        });

      },
      showplanDetail(row) {
        this.currentPlanId = row.id;
        this.showPlanDe();

      },
      showPlanDe() {
        let _this = this;
        this.getRequest("/productionplandetails/findPlan?salesPlanId=" + this.currentPlanId + "&page=" + this.currentDetailPage + "&size=10").then(resp => {
          _this.tableLoading = false;
          if (resp && resp.status === 200 && resp.data.success) {
            _this.plandetaillist = resp.data.data || [];
            _this.totalDatailPage = resp.data.total;
            if (_this.plandetaillist.length) {
              _this.showDetaillist = true;
              _this.showPlan = false;
            } else {
              _this.$message({type: 'info ', message: '没有进度！'})
              return false;
            }

          }
        })
      },

      doCancel(ids) {
        let _this = this;
        this.tableLoading = true;
        this.getRequest("/sales/annul?id=" + ids).then(resp => {
          _this.tableLoading = false;
          if (resp && resp.status === 200) {
            _this.loadData();
          }
        })
      },
      statusFormat(row) {
        let str = '';
        switch (row.status) {
          case 1:
            str = "新建";
            break;
          case 2:
            str = "开始生产";
            break;
          case 3:
            str = "生产完成";
            break;
          case 4:
            str = "生产撤销";
            break;

          default :

            break;
        }
        return str;
      },


      filterNode(value, data) {
        if (!value) return true;
        return data.label.indexOf(value) !== -1;
      },
      showRow(row) {
        this.selectedM = this.materialList.indexOf(row);
        this.selectMaterial = row;
        console.log(this.selectMaterial);
      },
      showMaterial() {
        this.loadMaterial();

      },
      chooseMaterial() {
        console.log('选择原料了！');
        let vm = this;

        if (this.selectMaterial.id > 0) {
          const msg = this.selectMaterial.producteName + "" + this.selectMaterial.specName + ";";
          this.$confirm('您当前选择了' + msg + "确认选择该产品吗？", '提示', {
            confirmButtonText: '确定',
            cancelButtonText: '取消',
            type: 'warning'
          }).then(() => {
            vm.setDetailData(vm);
          }).catch(() => {
            this.$message({
              type: 'info',
              message: '已取消'
            });
          });
        } else {
          this.$message({
            type: 'info',
            message: '请选择原材料！'
          })
        }

      },
      setDetailData() {
        let that = this;
        let v = that.selectMaterial;
        console.log(v);

        that.detail.productName = v.producteName;
        that.detail.proId = v.id; //选取的物料Id
        // let speclist = [];
        //
        // let specsArr = v.specs;
        // if (specsArr.length) {
        //   specsArr.forEach(function (v) {
        //     speclist.push(v.id);
        //   })
        // }

        that.detail.specification = '';
        that.specslist = v.specs || [];
        that.colorlist = v.colors || [];
        that.detail.productNo = v.proType
        this.dialogMaterialVisible = false;
      },
      cancelchoose: function () {
        console.log('选择框关闭')
        this.selectMaterial = {};
        this.selectedM = {};
      },
      formatStatus: function (row, column) {
        return row.materialType == 1 ? '已确认' : '未确认';
      },
      //materials: [["手套", 1, 38]]
      selectType(e, v, icon) {
        let that = this;
        console.log('changne'); //products  materials
        this.types = e;
        if (e == 2) {
          this.midProduct = [];
          this.midProduct = this.materials.concat(this.midProduct);
          this.emptyDetail()
        } else {
          this.midProduct = [];
          this.midProduct = this.products.concat(this.midProduct);
          this.emptyDetail()
        }
      },
      matterSelect(e) {
        console.log(e);
        let that = this;
        this.midProduct.forEach(function (v, i, arr) {
          if (v.id == e) {
            that.detail.unitId = v.unitId;
            that.detail.unitName = v.unitName;
            that.detail.name = v.name;
            that.detail.materialId = v.id; //选取的物料Id
            that.detail.specifications = v.specs;

          }
        })
      },
      addBox() {
        let that = this;
        console.log("asdfadsfasdfasd");
        if (this.detail.quantity === '' || this.detail.quantity === undefined) {
          Message('请输入数量');
          return false;
        }
        if (this.detail.name === '' || this.detail.name === undefined) {
          Message('请选择产品！');
          return false;
        }
        if (this.detail.sid === "") {
          if (this.marketPlanDetails.length > 0) {
            //this.types 选择的类型原料/半成品
            //有之前相同的。。增加数量
            let flag = false;
            this.marketPlanDetails.forEach(function (v, i, arr) {
              if (v.materialId === that.detail.materialId && v.mtype === that.types) {
                flag = true;
                v.quantity = parseFloat(that.detail.quantity) + parseFloat(v.quantity);
              }
            });
            if (!flag) {
              this.maxSid += 1;
              this.detail.sid = this.maxSid;
              this.detail.type = 'new'
              // this.detail.mtype = this.types;
              this.marketPlanDetails.push(this.detail);
            }

          } else {
            this.detail.sid = 1;
            this.detail.type = 'new'
            this.detail.mtype = this.types;
            this.maxSid += 1;
            this.marketPlanDetails.push(this.detail);
          }
          ;
        } else {
          if (this.marketPlanDetails.length) {
            for (let index = 0, n = this.marketPlanDetails.length; index < n; index++) {
              let e = this.marketPlanDetails[index];
              if (e.type === 'odd') {
                this.detail.type = 'update'
                if (e.sid === this.detail.sid) {
                  this.marketPlanDetails.splice(index, 1);
                  this.marketPlanDetails.push(this.detail);
                }
              } else {
                if (e.sid === this.detail.sid) {
                  this.marketPlanDetails.splice(index, 1);
                  this.marketPlanDetails.push(this.detail);
                }
              }

            }
          }
        }
        this.detail.marketPlanSerialNumber = that.marketPlanSerialNumber;

        this.clearSerialNumbers();
        // console.log( this.marketPlanDetails);
        this.emptyDetail();
      },
      //清理编号和查询结果
      clearSerialNumbers() {
        let that = this;
        that.marketPlanSerialNumber = [];
        that.marketPlanSerialNumber.push({
          sid: 1,
          id: 0,
          startNo: '',
          endNo: '',
          type: 'new',
          note: ''
        });
      },

      editeDetail(index, row) {
        this.detail = row;
      },
      deleteDetail(index, row) {
        console.log('delete');
        let deletes = this.marketPlanDetails.splice(index, 1);
        if (deletes[0].type === "odd") {
          deletes[0].type = 'delete'
          this.currentDeleteData.push(deletes[0]);
        }
        this.maxSid -= 1;
      },
      emptyDetail() {
        this.detail = {
          sid: 0,
          id: 0,
          name: '',
          quantity: '',
          unitId: '',
          notes: '',
          unitName: '',
          specifications: '',
          type: '',
        };
      },
      initData() {
        let _this = this;
        _this.loadData();
        this.getRequest("/productionplan/basedata").then(resp => {
          if (resp && resp.status === 200) {
            let data = resp.data;
            _this.clients = _this.toTree(data.root.clients)
            _this.midProduct = [];
            _this.midProduct = _this.materials.concat(_this.midProduct);
            let pro = [];
            let p = data.root.products;
            p.forEach(function (v, i, arr) {
              pro.push({
                id: v[0],
                producteName: v[1],
                specification: v[2],
                proType: v[3],
                mark: v[4],
                color: v[5],
              })
            });
            _this.products = pro;
          }
        })

      },
      keywordsChange(val) {
        if (val === '') {
          this.loadData();
        }
      },
      keywordsMaterialChange(val) {
        if (val === '') {
          this.loadMaterial();
        }
      },
      handleNodeClick(data) {
        let that = this;
        that.tableLoading = true;
        this.crrentSelectShop = data;
        this.detail.clientId = data.id;
        this.detail.clientName = data.name;
        this.detail.abbrName = data.abbreviation;
        this.showOrHidePop = false;
        this.depTextColor = '#606266';

      },
      showCurrentNo() {

        if (this.isprarent) {
          this.isprarent = false;
        } else {
          this.isprarent = true;
        }
      },
      // 切换编号;
      changeNO() {
        let that = this;
        if (that.isCurrentShop) {
          that.lastPlanDetail = that.currentShop;
          that.isCurrentShop = false;
        } else {
          that.lastPlanDetail = that.currentParentShop;
          that.isCurrentShop = true;
        }
      },

      getCurrentPlans() {
        let that = this;
        if (this.crrentSelectShop.id === undefined) {
          this.$message({
            type: 'info',
            message: '请选择公司'
          })
        } else if (this.detail.proId === undefined || this.detail.proId === '') {
          this.$message({
            type: 'info',
            message: '请选择产品'
          })
        } else {
          this.getRequest("/sales/getPlanDetails?clientId=" + this.crrentSelectShop.id + "&productId=" + this
            .detail.proId).then(resp => {
            that.tableLoading = false;
            if (resp && resp.status === 200) {
              let data = resp.data;
              that.currentParentShop = data.root.parent;
              if (that.currentParentShop.length) {
                let n = that.currentParentShop.length - 1;
                that.currentParentShop = that.currentParentShop[n]
                let lastMaxNumber = that.currentParentShop[n].endNo;
                that.sugestParentstartNo = that.sugestStartNo(lastMaxNumber, 1);
              } else { //设置为起始的000001;
                that.sugestParentstartNo = '00000001';
                that.currentParentShop = {};
              }
              if (that.detail.quantity !== '') {
                that.sugestParentEndNo = that.sugestStartNo(that.currentParentShop[n].endNo, parseInt(that.detail
                  .quantity) + 1)
              }
              that.setStartSerialNo(that.sugestParentstartNo, that.sugestParentEndNo.endNo, "parent");
              that.lastPlanDetail = that.currentParentShop;
              that.currentShop = data.root.self;

              if (that.currentShop.length) {

                let m = that.currentShop.length - 1;
                that.currentShop = that.currentShop[m];
                let lastMisNumber = that.currentShop[m].endNo;
                that.sugestSelfNumbers = that.sugestStartNo(lastMisNumber, 1);
              } else { //设置为起始的000001;
                that.sugestSelfNumbers = "00000001"
                that.currentShop = {};
              }
            }
          })
        }
      },
      setEndNumber: function (e) {
        console.log(e);
        // e.target.value
        let that = this;
        if (that.isCurrentShop) {
          that.lastPlanDetail = that.currentShop;
          if (that.currentShop.length) {

            let m = that.currentShop.length - 1;
            that.sugestSelfEndNumbers = that.sugestStartNo(that.currentShop[m].endNo, parseInt(e) + 1);
            this.marketPlanSerialNumber[0].startNo = that.sugestSelfNumbers;
            this.marketPlanSerialNumber[0].endNo = that.sugestSelfEndNumbers;
            this.marketPlanSerialNumber[0].note = '';
            this.marketPlanSerialNumber[0].clientId = this.crrentSelectShop.id;
            this.marketPlanSerialNumber[0].productId = this.detail.proId;


          } else {
            let baseData = that.sugestSelfNumbers
            that.setCurrentEndData(baseData, e);
          }
        } else {
          that.lastPlanDetail = that.currentParentShop;
          if (that.currentParentShop.length) {
            let n = that.currentParentShop.length - 1;
            that.sugestParentEndNo = that.sugestStartNo(that.currentParentShop[n].endNo, parseInt(e) + 1);
            this.marketPlanSerialNumber[0].startNo = that.sugestParentstartNo;
            this.marketPlanSerialNumber[0].endNo = that.sugestParentEndNo;
            this.marketPlanSerialNumber[0].note = '';
            this.marketPlanSerialNumber[0].clientId = this.crrentSelectShop.id;
            this.marketPlanSerialNumber[0].productId = this.detail.proId;
          } else {
            let baseData = that.currentParentShop
            that.setCurrentEndData(baseData, e);
          }
        }
      },
      setCurrentEndData(baseData, e) {
        let baseLen = baseData.length;
        let currentData = parseInt(baseData) + parseInt(e);
        let currentDataLen = currentData.toString().length;
        let zerolen = baseLen - currentDataLen;
        if (zerolen) {
          for (let i = 0; i < zerolen; i++) {
            currentData = "0" + currentData;
          }
        }

        this.marketPlanSerialNumber[0].endNo = currentData;
      },

      //生成起始编号:
      sugestStartNo(str, nu) {
        let that = this;
        // let str = "ox002VtII0000UUY";
        let getNum = function (Str, isFilter) {
          isFilter = isFilter || false;
          if (typeof Str === "string") {
            // let arr = Str.match(/(0\d{2,})|([1-9]\d+)/g);
            //"/[1-9]\d{1,}/g",表示匹配1到9,一位数以上的数字(不包括一位数).
            //"/\d{2,}/g",  表示匹配至少二个数字至多无穷位数字
            let arr = Str.match(isFilter ? /[0-9]\d{1,}/g : /\d{1,}/g);
            console.log(arr);
            return arr.map(function (item) {
              //转换为整数，
              //但是提取出来的数字，如果是连续的多个0会被改为一个0，如000---->0，
              //或者0开头的连续非零数字，比如015，会被改为15，这是一个坑
              // return parseInt(item);
              //字符串，连续的多个0也会存在，不会被去掉
              return item;
            });
          } else {
            return [];
          }
        };
        let startIndex = str.indexOf(getNum(str)[0]);
        let startStr = str.substr(0, startIndex);
        let endStr = str.substr(startIndex + getNum(str)[0].length, str.length - 1);
        //中间数字的长度;
        let noLength = getNum(str)[0].length;
        let currentNumber = parseInt(getNum(str)[0]) + nu;
        let cNo = currentNumber.toString().length;
        let subNo = (currentNumber - cNo);
        if (subNo) {
          // 位数不够的补零
          for (let i = 0; i < subNo; i++) {
            currentNumber += "0";
          }
        }
        return startStr + currentNumber + endStr;

      },
      // 设置起始编号:type ;self  parent
      setStartSerialNo(sugestNo, endNo, type) {
        if (this.marketPlanSerialNumber.length) {
          this.marketPlanSerialNumber[0].startNo = sugestNo;
          this.marketPlanSerialNumber[0].endNo = endNo;
          this.marketPlanSerialNumber[0].note = '';
        }

      },

      clearChoose() {
        this.detail.clientId = 0;
        this.detail.clientName = "";
      },
      showDepTree() {
        this.showHidePop = !this.showHidePop;
      },
      selectChange(e) {
        let that = this;
        console.log(e);
        if (that.units) {
          that.units.forEach(function (v, arr) {
            if (v.id == e) {
              console.log(v.id);
              that.detail.unitName = v.name;

            }
          })
        }

      },
      currentChange(currentChange) {
        this.currentPage = currentChange;
        console.log(this.currentPage);
        this.loadData();
      },
      currentDetailChange(currentChange) {
        this.currentDetailPage = currentChange;
        console.log(this.currentPage);
        this.showPlanDe();
      },
      currentMaterialChange(currentChange) {
        this.currentMaterialPage = currentChange;
        this.loadMaterial();
      },
      addAndFlushData() {
        this.dialogTitle = "郑铁公司销售单";
        let that = this;
        that.marketPlanSerialNumber = [];

        that.marketPlanSerialNumber.push(this.serialNumber);

        that.dialogFormVisible = true;

      },
      searchData() {
        this.startDate = this.formatDateTime(this.value5[0]);
        this.endDate = this.formatDateTime(this.value5[1]);
        console.log(this.startDate);
        this.loadData();
      },
      searchMaterialData() {
        this.loadMaterial();
      },
      showEditEmpView(index, row) {
        console.log(row);
        let that = this;
        that.dialogTitle = "编辑信息";
        that.detail = row;
        if (row.pcCode) {
          that.detail.clientId = Array.from(row.pcCode.split(","), item => parseInt(item));
        }
        that.plan.createDate = row.createDate;
        that.specslist = row.product.specs;
        that.colorlist = row.product.colors;
        that.dialogFormVisible = true;
      },

      add(addEmpForm) {
        this.dialogFormVisible = true;
        let _this = this;
        let plans = _.cloneDeep(this.detail);
        plans.pcCode = plans.clientId.join(",");
        plans.clientId = plans.clientId.pop();
        delete plans.product;
        delete plans.client;
        delete plans.color;
        delete plans.editer;
        delete plans.specification;
        this.$refs[addEmpForm].validate((valid) => {
          if (valid) {
            if (_this.detail.id) {
              //更新
              this.tableLoading = true;
              console.log(_this.plan);
              this.postRequest("/sales/update", plans).then(resp => {
                _this.tableLoading = false;
                if (resp && resp.status === 200) {
                  // let data = resp.data;
                  _this.dialogFormVisible = false;
                  _this.loadData();
                  _this.emptyData();
                  _this.emptyDetail();
                  _this.clearSerialNumbers();
                }
              })
            } else {
              //添加
              this.tableLoading = true;
              if (this.plan.clientId === 0 || this.plan.clientId === '') {
                this.plan.clientId = 0;
              }
              console.log(plans);
              this.postRequest("/sales/add", plans).then(resp => {
                _this.tableLoading = false;
                if (resp && resp.status === 200) {
                  let data = resp.data;
                  _this.dialogFormVisible = false;
                  _this.loadData();
                  _this.emptyData();
                  _this.emptyDetail();
                  _this.clearSerialNumbers();
                }
              })
            }
          } else {
            return false;
          }
        });
      },
      loadMaterial() {
        let _this = this;
        this.tableLoading = true;
        this.getRequest("/product/findbypage?page=" + this.currentMaterialPage + "&size=10&queryName=" + this
          .keyMaterialwords).then(resp => {
          this.tableLoading = false;
          if (resp && resp.status == 200) {
            let data = resp.data.data;
            _this.materialList = data;
            _this.totalMaterialCount = resp.data.total;
            _this.dialogMaterialVisible = true;
            // _this.emptyData();
            // 清除选择的行
          }
        })
      },
      cancelOpt() {
        this.dialogFormVisible = false;
        this.loadData();
        this.emptyData();
      },
      doDelete(ids) {
        this.tableLoading = true;
        let _this = this;
        this.getRequest("/sales/delete?id=" + ids).then(resp => {
          _this.tableLoading = false;
          if (resp && resp.status === 200) {
            let data = resp.data;
            _this.loadData();
          }
        })
      },
      loadData() {
        let _this = this;
        this.tableLoading = true;
        // this.startDate
        // this.endDate=
        this.getRequest("/sales/findbystatus?page="
          + this.currentPage
          + "&size=10&status=" + this.manageStatus
          + "&start=" + this.startDate
          + "&end=" + this.endDate
          + "&clientName=" + this.keyClientName
          + "&productName=" + this.keyproductName
          + "&empName=" + this.keyempName
        )
          .then(resp => {
            this.tableLoading = false;
            if (resp && resp.status === 200 && resp.data.success) {
              _this.plans = _this.preDataSale(resp.data.data);
              console.log(_this.plans);
              _this.totalCount = resp.data.total;
              _this.emptyData();
            }
          })
      },
      emptyData() {
        this.marketPlanDetails = [];
        this.plan = {
          materialType: '',
          notes: '',
          serialNumber: '',
          clientId: 0,
          clientName: ''
        };
        this.detail = {
          id: 0,
          clientId: 0,
          clientName: '',
          quantity: '',
          note: '',
          productName: '',
          proId: '', //产品Id
          specification: "", //规格
          mark: '', //标记
          productNo: '', //型号
          specsId: '',//规格Id
          colorId: '',
          progressId: 0,//工序Id;
        };

      },
      back() {
        if (this.showDetaillist) {
          this.showDetaillist = false;
          this.showPlan = true;
        } else {
          this.showDetaillist = true;
          this.showPlan = false;
        }


      },
      preDataSale(data) {
        if (data.length) {
          for (let i = data.length - 1; i >= 0; i--) {
            let e = data[i];
            let color = e.status + '';
            switch (color) {
              case '1':
                e.bgcolor = "#eeeeee";
                break;
              case '2':
                e.bgcolor = "yellowgreen";
                break;
              case '3':
                e.bgcolor = "green";
                break;
              case '4':
                e.bgcolor = "#e4e4e4";
                break;
              case '5':
                e.bgcolor = "#2974df";
                break;
              case '6':
                e.bgcolor = "#85ce61";
                break;
              default:
                break;
            }

          }
        }
        return data;
      },
      toTree(data) {
        let result = []
        if (!Array.isArray(data)) {
          return result
        }
        data.forEach(item => {
          delete item.child;
        });
        let map = {};
        data.forEach(item => {
          map[item.id] = item;
        });
        data.forEach(item => {
          let parent = map[item.parentClientId];
          if (parent) {
            (parent.child || (parent.child = [])).push(item);
          } else {
            result.push(item);
          }
        });
        console.log(result);
        return result;
      },


    },
    computed: {
      routes() {
        return this.$store.state.routes
      }
    },


  }

</script>
<style>

  .el-step__title.is-process {
    color: #13ce66;
  }

  .el-step__description.is-process {
    color: #13ce66;
  }

  .el-step__head.is-process {
    color: #13ce66;
    border-color: #13ce66;
  }

  .el-step__title.is-finish {
    color: #C0C4CC;
  }

  .el-step__description.is-finish {
    color: #C0C4CC;
  }

  .el-step__head.is-finish {
    color: #C0C4CC;
    border-color: #C0C4CC;
  }

  .demo-table-expand label {
    width: 50px;
    color: #2974df;
  }

  .flex-sales {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: start;
  }

  .flex-sales .item-sales {
    display: block;
    box-sizing: border-box;
    height: 264px;
    width: 20%;
    overflow: hidden;
    /*margin-left: -4px;*/
    /*margin-top: -4px;*/
    /*line-height: 100px;*/
    text-align: center;
    list-style: none;
    padding: 5px;
    position: relative;
    justify-content: stretch;
  }

  .in-sales-show:hover {
    border-color: red;
    position: relative;
  }


  .in-sales-show {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    margin-left: 6px;
    margin-bottom: 5px;
    border: 1px solid #ccc;
    text-align: start;
    height: 230px;
    min-width: 200px;
    overflow-y: hidden;
    overflow: auto;
  }

  .main-salse-progress-plan {
    width: 100%;
    height: auto;
    padding: 10px 0;
    border: 1px solid red;
  }

  .send-input {
    width: 160px;
  }

  .send-head {
    padding: 0;
    display: flex;
    justify-content: space-between;
    align-items: center
  }

  .send-head-right-btn {
    margin-left: 5px;
    margin-right: 20px;
    display: inline
  }

  .send-head-left-btn {
    margin-left: 5px
  }

  .send-main {
    padding-left: 0px;
    padding-top: 0px

  }

  .send-main-div {
    margin-bottom: 10px;
    border-radius: 5px;
    padding: 5px 0;
    box-sizing: border-box;
    border:1px solid #20a0ff;
  }

  .page-tool {
    display: flex;
    justify-content: flex-end;
    margin: 2px;
  }


</style>
