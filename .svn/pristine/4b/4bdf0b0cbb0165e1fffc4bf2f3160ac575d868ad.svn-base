<template>
  <div>
    <el-container>
      <el-header style="padding: 0px;display:flex;justify-content:space-between;align-items: center">

        <div style="display: inline">
          <el-input
            placeholder="通过客户名称搜索,记得回车哦..."
            clearable
            @change="keywordsChange"
            style="width: 300px;margin: 0px;padding: 0px;"
            size="mini"
            :disabled="advanceSearchViewVisible"
            @keyup.enter.native="searchData"
            prefix-icon="el-icon-search"
            v-model="keywords">
          </el-input>
          <el-button type="primary" size="mini" style="margin-left: 5px" icon="el-icon-search" @click="searchData">搜索
          </el-button>
        </div>
        <div style="margin-left: 5px;margin-right: 20px;display: inline">

          <el-button  type="primary"  @click="addAndFlushData('companyRef')" size="mini" icon="el-icon-plus" >添加总公司</el-button>
        </div>

      </el-header>
      <el-main>

        <el-tabs v-model="activeName" type="border-card"  @tab-click="handleClick">
          <el-tab-pane label="下游客户" name="down"></el-tab-pane>
          <el-tab-pane label="上游企业" name="up"></el-tab-pane>
        </el-tabs>
        <div>

          <TreeGrid style="height:auto;"
                    :data="companys" lines="true" idField="id" treeField="name">
            <GridColumn field="name" title="公司名"></GridColumn>
            <GridColumn field="phone" title="电话"></GridColumn>
            <GridColumn field="address" title="地址"></GridColumn>
            <GridColumn field="progress" title="操作">
              <template slot="cell" slot-scope="{row}">
                <div >
                  <el-button @click="showEditEmpView(row)" style="padding: 3px 4px 3px 4px;margin: 2px"
                             size="mini">编辑
                  </el-button>
                  <el-button @click="addChild(row)" style="padding: 3px 4px 3px 4px;margin: 2px"
                             size="mini">添加子公司
                  </el-button>
                  <el-button v-if="!row.children" type="danger" style="padding: 3px 4px 3px 4px;margin: 2px" size="mini"
                             @click="deleteData(row)">删除
                  </el-button>
                </div>
              </template>
            </GridColumn>
          </TreeGrid>
          <div  style="text-align: center; " v-if="companys.length===0">
            暂无数据
          </div>
        </div>
      </el-main>
    </el-container>

    <el-dialog v-dialogDrag :title="formTitle"
               style="padding: 0px;"
               :close-on-click-modal="false"
               :visible.sync="formVisible"
               @close="cancelOpt"
               width="500px">
      <div style="width: 100% " v-if="formVisible">
        <el-form :model="company" :rules="rules" ref="addDataForm" size="sam" label-width="90px">

          <el-form-item label="站名:" prop="name">
            <el-input prefix-icon="el-icon-edit" v-model="company.name" size="mini" style="width: 200px"
                      placeholder="请输入客户名称"></el-input>
          </el-form-item>
          <el-form-item label="简称:" prop="abbreviation">
            <el-input prefix-icon="el-icon-phone" v-model="company.abbreviation" size="mini" style="width: 200px"
                      placeholder="请输入客户简称..."></el-input>
          </el-form-item>

          <el-form-item label="电话:" prop="phone">
            <el-input prefix-icon="el-icon-edit" v-model="company.phone" size="mini" style="width: 200px"
                      placeholder="公司电话...">
            </el-input>
          </el-form-item>
          <el-form-item label="传真:" prop="fax">
            <el-input prefix-icon="el-icon-edit" v-model="company.fax" size="mini" style="width: 200px"
                      placeholder="公司传真...">
            </el-input>
          </el-form-item>
          <el-form-item label="邮箱:" prop="email">
            <el-input prefix-icon="el-icon-message" v-model="company.email" size="mini" style="width: 200px"
                      placeholder="公司邮箱...">
            </el-input>
          </el-form-item>
          <el-form-item label="性质:" prop="status">
            <el-radio-group :disabled="selectRadio" v-model="company.status">
              <el-radio label='down'>下游</el-radio>
              <el-radio style="margin-left: 15px" label='up'>上游</el-radio>
            </el-radio-group>
          </el-form-item>
          <el-form-item label="地址:" prop="address">
            <el-input prefix-icon="el-icon-edit" v-model="company.address" size="mini" style="width: 200px"
                      placeholder="公司地址...">
            </el-input>
          </el-form-item>
          <el-form-item label="详细地址:" prop="addressDetails">
            <el-input prefix-icon="el-icon-edit" v-model="company.addressDetails" size="mini" style="width: 200px"
                      placeholder="详细地址..."></el-input>
          </el-form-item>
        </el-form>
      </div>
      <div slot="footer" class="dialog-footer">
        <el-button @click="formVisible=false">取 消</el-button>
        <el-button type="primary" @click="addData('addDataForm')">确 定</el-button>
      </div>
    </el-dialog>
  </div>
</template>
<script>

import treeTable from "./../TreeTable";

  export default{ 
    components: { treeTable},
    data() {

      const item = {
    };
      let   phonevalidate= (rule, value, callback) => {
        //后台方法
        const reg =   /^1[3|4|5|7|8][0-9]\d{8}$/;
        if(reg.test(value)){
          callback()
        }else{
          callback("电话号码格式错误!")
        }
      }
      return { 
        columns: [
        {
          text: "公司名称",
          value: "name",
          width: 200
        },
        {
          text: "编号",
          value: "id"
        },
        {
          text: "电话",
          value: "phone"
        },
        {
          text: "地址",
          value: "address"}
      ],
        dialogVisible: false,
        
        showOrHidePop: false,
        depTextColor: '#c0c4cc',
        keywords: '',
        tableLoading: false,
        advanceSearchViewVisible: false,
        rules: {
          name: [{required: true, message: '必填:名称', trigger: 'blur'}],
          // phone: [{required: true, message: '必填:电话号码', trigger: 'blur'},
          //   {
          //     validator:phonevalidate,
          //
          //     message: '电话号码错误',
          //     trigger: 'blur'
          //   }],
          
          // email: [{required: true, message: '必填:电子邮箱', trigger: 'blur'}, {
          //   type: 'email',
          //   message: '邮箱格式不正确',
          //   trigger: 'blur'
          // }],
        },
        companys:[],
        defaultProps: {
          label: 'name',
          isLeaf: 'leaf',
          children: 'child'
        },
        dialogTitle: '',
        currentPage:1,
        tableData: Array(10).fill(item),
        formLabelWidth: '120px',
        totalCount: -1,
        company: {
          name: '',
          phone: '',
          address: '',
          email:'',
          fax:'',
          status:'',
          abbreviation:'',
          parentName:'',
          parentClientId:'',
          infor:''
        },
        shops: [],
        posts:[],
        dialogTableVisible: false,
        dialogFormVisible: false,
        pName:'',
        pId:'',
        activeName:'down',
        tempShops:[],
        formVisible:false,
        formTitle:'',
      }
    },
    mounted: function () {
      this.initData();
      // this.formatGender(row);
    },
  
    methods: {
      addChild(row) {
        console.log(row)
        this.formTitle = "添加子公司";
        let company = row;
        let copShop = _.cloneDeep(company);
        console.log(row);
        this.isChild = true;
        this.selectRadio = true;
        this.tempShops = [];
        if (copShop.parentClientId === 0 || copShop.parentClientId === copShop.id) {
          delete copShop.child;
        } else {
          if (copShop.parent !== undefined) {
            delete copShop.parent;
          }

        }
        this.tempShops.push(copShop);
        this.company.parentName = copShop.name;
        this.company.parentClientId = copShop.id;
        this.company.status = copShop.status;
        this.formVisible = true;
      },
      formatSex: function (row, column) {
        return row.status === "up" ? '上游' : row.status === 'down' ? '下游' : '未知';
      },
      showDepTree(){
          this.showOrHidePop = !this.showOrHidePop;
      },
      onTreeDataChange(){},
      handleNodeClick(data) {
        this.company.parentName = data.name;
        this.company.parentClientId = data.id;
         this.pId=data.id;
         this.pName=data.name;
        this.showOrHidePop = false;
        this.depTextColor = '#606266';
      },
      handleClick(tab, event) {//切换标签
        // console.log(tab, event);
        let activeName=this.activeName;
        this.loadMyData(activeName)
      },
      clearChoose(){
        this.company.parentName = '';
        this.company.parentClientId = '';
      },
      headCall(data){
        this.companys=data; 
      },
      cancelChoos(){
        console.log(this.pName);
        this.company.parentName = this.pName;
        this.company.parentClientId =this.pId;
      },
      initData(){
        let _this = this;
        let activeName=this.activeName;
        _this.loadMyData(activeName);

      },
      keywordsChange(val){
        if (val === '') {
          let activeName=this.activeName;
          this.loadMyData(activeName);
        }
      },
      currentChange(currentChange){
        this.currentPage = currentChange;
        console.log(this.currentPage);
        let activeName=this.activeName;
        this.loadMyData(activeName);
      },
      addAndFlushData(){

        this.formTitle = "添加总公司";

        this.isChild = false;
        this.selectRadio = false;
        this.formVisible = true;


      },
      searchData(){
        let activeName=this.activeName;
        this.loadMyData(activeName);
      },
      showEditEmpView(row) {
        console.log(row)
        this.isChild = false;
        this.tempShops = [];
        this.formTitle = "编辑客户信息";
        this.company = row;
        this.selectRadio = true;
        // this.tempShops=_.cloneDeep(this.shops);
        console.log(row);
        this.company.parentClientId = row.parentClientId;
        this.company.createDate = row.createDate;
        this.company.parentName = row.parentName;
        // delete this.company.parent;
        delete this.company.purchasePlan;
        delete this.company.product;

        this.formVisible = true;
      },
      addData(addDataForm) {
        this.formVisible = true;
        let _this = this;
        this.$refs[addDataForm].validate((valid) => {
          if (valid) {
            let cops = _.cloneDeep(this.company)
            let cache = [];
            let str = JSON.stringify(cops.child, function (key, value) {
              if (typeof value === 'object' && value !== null) {
                if (cache.indexOf(value) !== -1) {
                  // Circular reference found, discard key
                  return;
                }
                // Store value in our collection
                cache.push(value);
              }
              return value;
            });
            cache = null;
            cops.child = str;
            if (cops.parentClientId === undefined || cops.parentClientId === null || cops.parentClientId === '') {
              cops.parentClientId = 0;
              cops.parentName = '';
            }
            delete cops.parent;
            console.log(cops);
            if (this.company.id) {
              //更新
              _this.tableLoading = true;
              this.postRequest("/client/update", cops).then(resp => {
                _this.tableLoading = false;
                if (resp && resp.status === 200 && resp.data.success) {
                  // let data = resp.data;
                  _this.formVisible = false;
                  let activeName = _this.activeName;
                  _this.loadMyData(activeName);
                  _this.emptyData();

                } else {
                  this.$message({type: 'info', message: '更新失败'})
                }
              })
            } else {
              //添加
              this.tableLoading = true;
              this.postRequest("/client/add", cops).then(resp => {
                _this.tableLoading = false;
                if (resp && resp.status === 200 && resp.data.success) {
                  let data = resp.data;
                  _this.formVisible = false;
                  let activeName = _this.activeName;
                  _this.loadMyData(activeName);
                  _this.emptyData();

                } else {
                  this.$message({type: 'info', message: '添加失败'})
                }
              })
            }
          } else {
            return false;
          }
        });
      },
      cancelOpt(){
        this.dialogFormVisible=false;
        this.emptyData();
      },

      deleteData(row) {
        let _this = this;
        this.$confirm('此操作将删除该条记录, 是否继续?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          console.log('55')
          _this.doDelete(row.id);

        }).catch(() => {
        });
      },
      doDelete(ids) {
        console.log('666')
        this.tableLoading = true;
        let _this = this;
        _this.getRequest("/client/delete?id=" + ids).then(resp => {
          _this.tableLoading = false;
          console.log('777777');
          if (resp && resp.status === 200 && resp.data.success) {
            let activeName = this.activeName;
            _this.loadMyData(activeName);
          } else {
            this.$message({type: 'info', message: '失败'})
          }
        })
      },
      loadMyData(){
        let _this = this;
        let activeName=this.activeName;
        this.tableLoading = true;
        console.log(activeName);
        this.getRequest("/client/findbypage?page=" + this.currentPage + "&size=100&queryName="+this.keywords+"&shopType="+activeName).then(resp=> {
          this.tableLoading = false;
          if (resp && resp.status === 200) {
            _this.companys =_this.famatDataArr(resp.data.data);
            console.log(_this.companys);
            _this.totalCount=resp.data.total;
            _this.emptyData();
          }
        });
        this.getRequest("/client/baseData").then(resp=> {
          if (resp && resp.status === 200) {
            _this.shops = resp.data.data;

          }
        })
      },
      famatDataArr(data){
        let _this=this;
        if(data&&data.length){
          Array.from(data).forEach((value) => {
            _this.toArrays(value);
          })
        }
        return data;
      },
      toArrays(item){
        let _this=this;
         if(item.child&&item.child.length>0){
           item.children=item.child;
           Array.from(item.children).forEach((value) => {
             if(value.child&&value.child.length>0)
             _this.toArrays(value);
           })
         }
      },
      toTree(data) {
        let result = []
        if(!Array.isArray(data)) {
          return result
        }
        data.forEach(item => {
          delete item.child;
        });
        let map = {};
        data.forEach(item => {
          map[item.id] = item;
        });
        data.forEach(item => {
          let parent = map[item.parentClientId];
          if(parent) {
            (parent.children || (parent.children = [])).push(item);
          } else {
            result.push(item);
          }
        });
        console.log(result);
        return result;
      },
      emptyData(){
        console.log('+++++_+++++_')
        this.company = {
          name: '',
          phone: '',
          address: '',
          email:'',
          birthday:'',
          entryDate:'',
          status:'',
          departmentName:'',
          departmentId:''
        }
      }
    },
    computed: {
      routes(){
        return this.$store.state.routes
      }
    }
  }
</script>
<style>

  .home-aside {
    background-color: #ECECEC;
    width:60px;
  }

  .home-main {
    background-color: #fff;
    color: #000;
    text-align: center;
    margin: 0px;
    padding: 0px;;
  }

  .home_title {
    color: #fff;
    font-size: 22px;
    display: inline;
    margin-left: 8px;
  }

  .home_userinfo {
    color: #fff;
    cursor: pointer;
  }

  .home_userinfoContainer {
    display: inline;
    margin-right: 20px;
  }

  .el-submenu .el-menu-item {
    width: 180px;
    min-width: 175px;
  }
  .iconRight{

    margin-right: 10px;
  }
</style>
